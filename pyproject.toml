# vim: set ft=toml :


[project]
name = 'parquet-modular-encryption'
requires-python = '>= 3.12'
dependencies = [
  'cryptography',
  'fastapi',
  'httpx',
  'pyarrow',
  'pydantic',
  'uvicorn[standard]',
]


[tool.pixi.project]
channels = ['conda-forge']
platforms = [
  'linux-64',
  'linux-aarch64',
  'osx-64',
  'osx-arm64',
]

[tool.pixi.tasks]
serve = { cmd = ['python', 'kms_server.py'] }
write = { cmd = ['python', 'write_encrypted_parquet.py'] }
read = { cmd = ['python', 'read_encrypted_parquet.py'] }

[tool.pixi.environments]
lint = { features = ['lint'] }

[tool.pixi.feature.lint.pypi-dependencies]
pre-commit = { version = '*' }
pre-commit-hooks = { version = '*' }
ruff = { version = '*' }

[tool.pixi.feature.lint.tasks]
lint = { depends-on = ['pre-commit-run'] }
pre-commit-install = { depends-on = [
  'pre-commit-install-commit-msg',
  'pre-commit-install-post-checkout',
  'pre-commit-install-post-commit',
  'pre-commit-install-post-merge',
  'pre-commit-install-post-rewrite',
  'pre-commit-install-pre-commit',
  'pre-commit-install-pre-merge-commit',
  'pre-commit-install-pre-push',
  'pre-commit-install-pre-rebase',
  'pre-commit-install-prepare-commit-msg',
] }
pre-commit-install-commit-msg = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'commit-msg',
] }
pre-commit-install-post-checkout = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-checkout',
] }
pre-commit-install-post-commit = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-commit',
] }
pre-commit-install-post-merge = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-merge',
] }
pre-commit-install-post-rewrite = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'post-rewrite',
] }
pre-commit-install-pre-commit = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-commit',
] }
pre-commit-install-pre-merge-commit = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-merge-commit',
] }
pre-commit-install-pre-push = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-push',
] }
pre-commit-install-pre-rebase = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'pre-rebase',
] }
pre-commit-install-prepare-commit-msg = { cmd = [
  'pre-commit', 'install', '-f', '-t', 'prepare-commit-msg',
] }
pre-commit-run = { cmd = ['pre-commit', 'run', '--all-files'] }


[tool.ruff]
line-length = 100
target-version = 'py312'

[tool.ruff.lint]
dummy-variable-rgx = '^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$'
fixable = ['ALL']
ignore = [
  'ANN',      # mypy handles our type annotations
  'COM812',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'COM819',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'CPY',      # not publishing publicly
  'D',        # we prefer our own docstring style
  'E111',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'E114',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'E117',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'EM101',
  'ERA',      # do not remove commented-out code
  'ISC001',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'ISC002',   # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'PLR2004',
  'Q000',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'Q001',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'Q002',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'Q003',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  'S105',
  'S106',
  'SLF001',
  'T201',
  'TCH',      # TYPE_CHECKING blocks break autodocs
  'TRY003',
  'W191',     # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
]
select = ['ALL']
unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
